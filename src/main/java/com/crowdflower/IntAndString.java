/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.crowdflower;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class IntAndString implements org.apache.thrift.TBase<IntAndString, IntAndString._Fields>, java.io.Serializable, Cloneable, Comparable<IntAndString> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IntAndString");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FLEX_META_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("flexMetaData", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField NUMBER_OF_ATOMS_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfAtoms", org.apache.thrift.protocol.TType.I64, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new IntAndStringStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new IntAndStringTupleSchemeFactory();

  public java.lang.String name; // required
  public int count; // required
  public java.util.Map<java.lang.String,java.lang.String> flexMetaData; // required
  public long numberOfAtoms; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    COUNT((short)2, "count"),
    FLEX_META_DATA((short)5, "flexMetaData"),
    NUMBER_OF_ATOMS((short)8, "numberOfAtoms");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // COUNT
          return COUNT;
        case 5: // FLEX_META_DATA
          return FLEX_META_DATA;
        case 8: // NUMBER_OF_ATOMS
          return NUMBER_OF_ATOMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COUNT_ISSET_ID = 0;
  private static final int __NUMBEROFATOMS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FLEX_META_DATA, new org.apache.thrift.meta_data.FieldMetaData("flexMetaData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.NUMBER_OF_ATOMS, new org.apache.thrift.meta_data.FieldMetaData("numberOfAtoms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IntAndString.class, metaDataMap);
  }

  public IntAndString() {
  }

  public IntAndString(
    java.lang.String name,
    int count,
    java.util.Map<java.lang.String,java.lang.String> flexMetaData,
    long numberOfAtoms)
  {
    this();
    this.name = name;
    this.count = count;
    setCountIsSet(true);
    this.flexMetaData = flexMetaData;
    this.numberOfAtoms = numberOfAtoms;
    setNumberOfAtomsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IntAndString(IntAndString other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.count = other.count;
    if (other.isSetFlexMetaData()) {
      java.util.Map<java.lang.String,java.lang.String> __this__flexMetaData = new java.util.HashMap<java.lang.String,java.lang.String>(other.flexMetaData);
      this.flexMetaData = __this__flexMetaData;
    }
    this.numberOfAtoms = other.numberOfAtoms;
  }

  public IntAndString deepCopy() {
    return new IntAndString(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setCountIsSet(false);
    this.count = 0;
    this.flexMetaData = null;
    setNumberOfAtomsIsSet(false);
    this.numberOfAtoms = 0;
  }

  public java.lang.String getName() {
    return this.name;
  }

  public IntAndString setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getCount() {
    return this.count;
  }

  public IntAndString setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public int getFlexMetaDataSize() {
    return (this.flexMetaData == null) ? 0 : this.flexMetaData.size();
  }

  public void putToFlexMetaData(java.lang.String key, java.lang.String val) {
    if (this.flexMetaData == null) {
      this.flexMetaData = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.flexMetaData.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.String> getFlexMetaData() {
    return this.flexMetaData;
  }

  public IntAndString setFlexMetaData(java.util.Map<java.lang.String,java.lang.String> flexMetaData) {
    this.flexMetaData = flexMetaData;
    return this;
  }

  public void unsetFlexMetaData() {
    this.flexMetaData = null;
  }

  /** Returns true if field flexMetaData is set (has been assigned a value) and false otherwise */
  public boolean isSetFlexMetaData() {
    return this.flexMetaData != null;
  }

  public void setFlexMetaDataIsSet(boolean value) {
    if (!value) {
      this.flexMetaData = null;
    }
  }

  public long getNumberOfAtoms() {
    return this.numberOfAtoms;
  }

  public IntAndString setNumberOfAtoms(long numberOfAtoms) {
    this.numberOfAtoms = numberOfAtoms;
    setNumberOfAtomsIsSet(true);
    return this;
  }

  public void unsetNumberOfAtoms() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFATOMS_ISSET_ID);
  }

  /** Returns true if field numberOfAtoms is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberOfAtoms() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBEROFATOMS_ISSET_ID);
  }

  public void setNumberOfAtomsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBEROFATOMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((java.lang.Integer)value);
      }
      break;

    case FLEX_META_DATA:
      if (value == null) {
        unsetFlexMetaData();
      } else {
        setFlexMetaData((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case NUMBER_OF_ATOMS:
      if (value == null) {
        unsetNumberOfAtoms();
      } else {
        setNumberOfAtoms((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case COUNT:
      return getCount();

    case FLEX_META_DATA:
      return getFlexMetaData();

    case NUMBER_OF_ATOMS:
      return getNumberOfAtoms();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case COUNT:
      return isSetCount();
    case FLEX_META_DATA:
      return isSetFlexMetaData();
    case NUMBER_OF_ATOMS:
      return isSetNumberOfAtoms();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof IntAndString)
      return this.equals((IntAndString)that);
    return false;
  }

  public boolean equals(IntAndString that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_flexMetaData = true && this.isSetFlexMetaData();
    boolean that_present_flexMetaData = true && that.isSetFlexMetaData();
    if (this_present_flexMetaData || that_present_flexMetaData) {
      if (!(this_present_flexMetaData && that_present_flexMetaData))
        return false;
      if (!this.flexMetaData.equals(that.flexMetaData))
        return false;
    }

    boolean this_present_numberOfAtoms = true;
    boolean that_present_numberOfAtoms = true;
    if (this_present_numberOfAtoms || that_present_numberOfAtoms) {
      if (!(this_present_numberOfAtoms && that_present_numberOfAtoms))
        return false;
      if (this.numberOfAtoms != that.numberOfAtoms)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + count;

    hashCode = hashCode * 8191 + ((isSetFlexMetaData()) ? 131071 : 524287);
    if (isSetFlexMetaData())
      hashCode = hashCode * 8191 + flexMetaData.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(numberOfAtoms);

    return hashCode;
  }

  @Override
  public int compareTo(IntAndString other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFlexMetaData()).compareTo(other.isSetFlexMetaData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlexMetaData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flexMetaData, other.flexMetaData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumberOfAtoms()).compareTo(other.isSetNumberOfAtoms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberOfAtoms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfAtoms, other.numberOfAtoms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("IntAndString(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flexMetaData:");
    if (this.flexMetaData == null) {
      sb.append("null");
    } else {
      sb.append(this.flexMetaData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numberOfAtoms:");
    sb.append(this.numberOfAtoms);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IntAndStringStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public IntAndStringStandardScheme getScheme() {
      return new IntAndStringStandardScheme();
    }
  }

  private static class IntAndStringStandardScheme extends org.apache.thrift.scheme.StandardScheme<IntAndString> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IntAndString struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FLEX_META_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.flexMetaData = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                java.lang.String _key1;
                java.lang.String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.flexMetaData.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setFlexMetaDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NUMBER_OF_ATOMS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.numberOfAtoms = iprot.readI64();
              struct.setNumberOfAtomsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IntAndString struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(struct.count);
      oprot.writeFieldEnd();
      if (struct.flexMetaData != null) {
        oprot.writeFieldBegin(FLEX_META_DATA_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.flexMetaData.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter4 : struct.flexMetaData.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUMBER_OF_ATOMS_FIELD_DESC);
      oprot.writeI64(struct.numberOfAtoms);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IntAndStringTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public IntAndStringTupleScheme getScheme() {
      return new IntAndStringTupleScheme();
    }
  }

  private static class IntAndStringTupleScheme extends org.apache.thrift.scheme.TupleScheme<IntAndString> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IntAndString struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.name);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCount()) {
        optionals.set(0);
      }
      if (struct.isSetFlexMetaData()) {
        optionals.set(1);
      }
      if (struct.isSetNumberOfAtoms()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
      if (struct.isSetFlexMetaData()) {
        {
          oprot.writeI32(struct.flexMetaData.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter5 : struct.flexMetaData.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
      if (struct.isSetNumberOfAtoms()) {
        oprot.writeI64(struct.numberOfAtoms);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IntAndString struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.flexMetaData = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map6.size);
          java.lang.String _key7;
          java.lang.String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.flexMetaData.put(_key7, _val8);
          }
        }
        struct.setFlexMetaDataIsSet(true);
      }
      if (incoming.get(2)) {
        struct.numberOfAtoms = iprot.readI64();
        struct.setNumberOfAtomsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

